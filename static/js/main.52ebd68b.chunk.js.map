{"version":3,"sources":["component/ContactList/ContactList.module.css","redux/contacts/contacts-action.js","redux/contacts/contacts-reducer.js","redux/store.js","component/ContactList/ContactList.js","component/Filter/Filter.js","component/ContactForm/ContactForm.js","App.js","index.js","component/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","task","payload","id","uuidv4","removeContact","changeFilter","items","createReducer","actions","state","filter","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","contactsReducer","devTools","process","persistor","persistStore","getVisibleContacts","allContacts","name","toLowerCase","includes","connect","dispatch","onRemoveContact","contactsActions","className","styles","TaskList","map","contact","TaskList_item","number","TaskList_button","type","onClick","Filter","value","onChangeFilter","onChange","defaultProps","onchangeFilter","e","target","ContactForm","handleChange","setState","handleSubmit","preventDefault","searchSameName","props","find","console","log","alert","length","onAddContact","TaskEditor","onSubmit","this","TaskEditor_label","TaskEditor_input","TaskEditor_button","Component","text","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.52ebd68b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskList\":\"ContactList_TaskList__odGqr\",\"TaskList_item\":\"ContactList_TaskList_item__31RA8\",\"completed\":\"ContactList_completed__3B3C9\",\"TaskList_text\":\"ContactList_TaskList_text__13SCa\",\"TaskList_actions\":\"ContactList_TaskList_actions__3EPks\",\"TaskList_button\":\"ContactList_TaskList_button__2fOJX\"};","import { createAction } from '@reduxjs/toolkit';\r\n// import types from './contacts-type';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n// const addContact = createAction('contacts / addContact', ({ name, number }) => {\r\n//   return {\r\n//     payload: {\r\n//       name: name,\r\n//       number: number,\r\n//       id: uuidv4(),\r\n//     },\r\n//   };\r\n// });\r\n\r\nconst addContact = createAction('contacts / addContact', task => {\r\n  return {\r\n    payload: {\r\n      ...task,\r\n      id: uuidv4(),\r\n    },\r\n  };\r\n});\r\n\r\n// const addContact = task => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     ...task,\r\n//     id: uuidv4(),\r\n//   },\r\n// });\r\nconst removeContact = createAction('contacts / removeContact');\r\n// const removeContact = contactId => ({\r\n//   type: types.REMOVE,\r\n//   payload: contactId,\r\n// });\r\n\r\nconst changeFilter = createAction('contacts / changeFilter');\r\n// const changeFilter = value => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n\r\nexport default { addContact, removeContact, changeFilter };\r\n","import { combineReducers, createStore } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contacts-action';\r\n// import types from './contacts-type';\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n\r\n//     case types.REMOVE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.removeContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case 'contacts/changeFilter':\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","// // import { createStore, combineReducers } from 'redux';\r\n// import { combineReducers } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport {\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n  //   combineReducers,\r\n} from '@reduxjs/toolkit';\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n// console.log(getDefaultMiddleware());\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: persistReducer(persistConfig, contactsReducer),\r\n// });\r\n\r\n// const persisteReducer = persistReducer(persistConfig, rootReducer);\r\n// const store = configureStore({\r\n//   reducer: {\r\n//     contacts: contactsReducer,\r\n//   },\r\n//   middleware: middleware,\r\n//   devTools: process.env.NODE_ENV === 'development',\r\n// });\r\nconst store = configureStore({\r\n  //   reducer: persisteReducer,\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware: middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\nexport default { store, persistor };\r\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport styles from './ContactList.module.css';\nimport contactsActions from '../../redux/contacts/contacts-action';\n\nconst ContactList = ({ contacts, onRemoveContact }) => (\n  <ul className={styles.TaskList}>\n    {contacts.map(contact => (\n      <li className={styles.TaskList_item} key={contact.id}>\n        {contact.name + ':' + contact.number}\n        {\n          <button\n            className={styles.TaskList_button}\n            type=\"button\"\n            name=\"delete\"\n            onClick={() => onRemoveContact(contact.id)}\n            // onClick={() => onRemoveContact(id)}\n          >\n            delete\n          </button>\n        }\n      </li>\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  onRemoveContact: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nconst getVisibleContacts = (allContacts, filter) => {\n  // const { contacts, filter } = this.state;\n\n  return allContacts.filter(contacts =>\n    contacts.name.toLowerCase().includes(filter.toLowerCase()),\n  );\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  contacts: getVisibleContacts(items, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onRemoveContact: id => dispatch(contactsActions.removeContact(id)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-action';\n\nconst Filter = ({ value, onChangeFilter }) => {\n  return (\n    <div>\n      Find contacts by name\n      <input type=\"text\" value={value} onChange={onChangeFilter} />\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onchangeFilter: PropTypes.func,\n};\nFilter.defaultProps = {\n  value: '',\n  onchangeFilter: () => {},\n};\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeFilter: e => dispatch(contactsActions.changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-action';\nimport styles from './ContactForm.module.css';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = e => {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const searchSameName = this.props.items.find(\n      contact => contact.name === this.state.name,\n    );\n    console.log(searchSameName);\n    // searchSameName\n    //   ? alert(`&{this.state.name} is already in contacts `)\n    //   : this.props.onAddContact(this.state);\n\n    if (searchSameName) {\n      alert(`${this.state.name} is already in contacts`);\n      return;\n    } else if (this.state.name.length === 0) {\n      alert('Fields must be filled!');\n      return;\n    }\n    this.props.onAddContact({ ...this.state });\n    this.setState({ name: '', number: '' });\n  };\n  render() {\n    return (\n      <form className={styles.TaskEditor} onSubmit={this.handleSubmit}>\n        <label className={styles.TaskEditor_label}>\n          Name\n          <input\n            className={styles.TaskEditor_input}\n            type=\"text\"\n            name=\"name\"\n            value={this.state.name}\n            onChange={this.handleChange}\n          />\n        </label>\n        <label className={styles.TaskEditor_label}>\n          Number\n          <input\n            className={styles.TaskEditor_input}\n            type=\"text\"\n            name=\"number\"\n            value={this.state.number}\n            onChange={this.handleChange}\n          />\n        </label>\n        <button className={styles.TaskEditor_button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onAddContact: PropTypes.func,\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n\nconst mapStateToProps = state => {\n  //console.log(state);\n  return {\n    items: state.contacts.items,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onAddContact: text => dispatch(contactsActions.addContact(text)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport ContactList from './component/ContactList';\nimport Filter from './component/Filter';\nimport ContactForm from './component/ContactForm';\n\nexport default class App extends Component {\n  // state = {\n  //   contacts: [],\n  //   filter: '',\n  // };\n\n  // componentDidMount() {\n  //   console.log('App componentDidMaunt');\n\n  //   const contacts = localStorage.getItem('contacts');\n  //   const parsedContacts = JSON.parse(contacts);\n\n  //   if (parsedContacts) {\n  //     this.setState({ contacts: parsedContacts });\n  //   }\n  // }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     console.log('Обновилось поле contacts');\n\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  // addContact = task => {\n  //   const searchSameName = this.state.contacts\n  //     .map(cont => cont.name)\n  //     .includes(task.name);\n\n  //   if (searchSameName) {\n  //     alert(`${task.name} is already in contacts`);\n  //   } else if (task.name.length === 0) {\n  //     alert('Fields must be filled!');\n  //   } else {\n  //     const contact = {\n  //       ...task,\n  //       id: uuidv4(),\n  //     };\n\n  //     this.setState(prevState => ({\n  //       contacts: [...prevState.contacts, contact],\n  //     }));\n  //   }\n  // };\n\n  // changeFilter = filter => {\n  //   this.setState({ filter });\n  // };\n\n  // getVisibleContacts = () => {\n  //   const { contacts, filter } = this.state;\n\n  //   return contacts.filter(contacts =>\n  //     contacts.name.toLowerCase().includes(filter.toLowerCase()),\n  //   );\n  // };\n\n  // removeContact = contactId => {\n  //   this.setState(prevState => {\n  //     return {\n  //       contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n  //     };\n  //   });\n  // };\n\n  render() {\n    // const { filter } = this.state;\n    // const visibleContacts = this.getVisibleContacts();\n\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm\n        // onAddContact={this.addContact}\n        />\n        <h2>Contacts</h2>\n        {/* <Filter value={filter} onChangeFilter={this.changeFilter} /> */}\n        <Filter />\n        <ContactList\n        // contacts={visibleContacts}\n        // onRemoveContact={this.removeContact}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PersistGate loading={null} persistor={store.persistor}>\n      <Provider store={store.store}>\n        <App />\n      </Provider>\n    </PersistGate>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskEditor\":\"ContactForm_TaskEditor__1aZVC\",\"TaskEditor_label\":\"ContactForm_TaskEditor_label__2N9SI\",\"TaskEditor_input\":\"ContactForm_TaskEditor_input__1JRev\",\"TaskEditorinput\":\"ContactForm_TaskEditorinput__1WVrx\",\"TaskEditor_button\":\"ContactForm_TaskEditor_button__2KTc6\"};"],"sourceRoot":""}